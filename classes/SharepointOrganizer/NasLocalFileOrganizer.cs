using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

public class NasLocalFileOrganizer
{
    private List<WorkOrderData> _workOrders;

    public NasLocalFileOrganizer()
    {
        _workOrders = new List<WorkOrderData>();
    }

    public class WorkOrderData
    {
        public string WorkOrderName { get; set; }
        public string ServiceAccountName { get; set; }
        public string NoteText { get; set; }
        public string ProcessedServiceAccountName { get; set; }
        public string ProcessedNoteText { get; set; }
        public string ObjectIdType { get; set; }
    }

    public async Task RunAsync()
    {
        try
        {
            while (true)
            {
                Console.WriteLine("\nThis code will organize the files generated by the power automates,");
                Console.WriteLine("Make sure you ran both, one extracts the files from the NAS and the other double checks the process");
                Console.WriteLine("\nYou need to download the unsorted files first from the Sharepoint and then run this code");
                Console.WriteLine("You will be asked to select a folder, choose the one that has the actual files");
                Console.WriteLine("Don't choose the folder that contains the folder that contains the files, it won't work");
                Console.WriteLine("\nAfter the code organizes the files you need to upload them back to the Sharepoint");

                var response = await GetUserInputAsync();
                if (response == "n")
                {
                    Console.WriteLine("\nOperation cancelled by user.");
                    Console.WriteLine("\nPress any key to continue...");
                    await Task.Run(() => Console.ReadKey());
                    return;
                }

                if (response == "y")
                {
                    Console.WriteLine("\nOpening folder selection dialog...");
                    var selectedFolder = await SelectFolderAsync();

                    if (string.IsNullOrEmpty(selectedFolder))
                    {
                        Console.WriteLine("No folder was selected. Operation cancelled.");
                        Console.WriteLine("Press any key to continue...");
                        await Task.Run(() => Console.ReadKey());
                        return;
                    }

                    Console.WriteLine($"\nSelected folder: {selectedFolder}");
                    Console.WriteLine("Starting file organization...");
                    await OrganizeFilesAsync(selectedFolder);

                    Console.WriteLine("\nOperation completed. Press any key to continue...");
                    await Task.Run(() => Console.ReadKey());
                    return;
                }

                Console.WriteLine("Invalid input. Please enter 'y' or 'n'.");
            }
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"Error during operation: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            Console.ResetColor();
            Console.WriteLine("\nPress any key to continue...");
            await Task.Run(() => Console.ReadKey());
        }
    }

    private async Task<string> GetUserInputAsync()
    {
        Console.Write("\nDo you want to organize files? (y/n): ");
        return await Task.Run(() => Console.ReadLine()?.ToLower() ?? "");
    }

    private async Task<string> SelectFolderAsync()
    {
        var tcs = new TaskCompletionSource<string>();

        await Task.Run(() =>
        {
            var thread = new Thread(() =>
            {
                try
                {
                    using var form = new Form();
                    form.Visible = false;
                    using var dialog = new FolderBrowserDialog
                    {
                        Description = "Select folder containing the files to organize",
                        UseDescriptionForTitle = true,
                        ShowNewFolderButton = true
                    };

                    if (dialog.ShowDialog(form) == DialogResult.OK)
                    {
                        tcs.SetResult(dialog.SelectedPath);
                    }
                    else
                    {
                        tcs.SetResult(string.Empty);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error in folder dialog: {ex.Message}");
                    Console.WriteLine($"Stack trace: {ex.StackTrace}");
                    tcs.SetResult(string.Empty);
                }
            });

            thread.SetApartmentState(ApartmentState.STA);
            thread.Start();
            thread.Join();
        });

        return await tcs.Task;
    }

    private async Task DebugInspectionFilesAsync(string sourceFolder)
    {
        await Task.Run(() =>
        {
            Console.WriteLine("\n=== Debugging Inspection Files ===");

            var inspectionFiles = _workOrders
                .Where(wo => wo.ProcessedNoteText.Contains("Inspection mensuelle"))
                .ToList();

            foreach (var wo in inspectionFiles)
            {
                Console.WriteLine("\nFile Details:");
                Console.WriteLine($"Filename: {wo.ProcessedNoteText}");
                Console.WriteLine($"Work Order: {wo.WorkOrderName}");
                Console.WriteLine($"Service Account: {wo.ServiceAccountName}");
                Console.WriteLine($"Processed Service Account: {wo.ProcessedServiceAccountName}");

                var sourceFile = Path.Combine(sourceFolder, wo.ProcessedNoteText);
                var saPath = Path.Combine(sourceFolder, wo.ProcessedServiceAccountName);
                var woPath = wo.WorkOrderName != null ? Path.Combine(saPath, wo.WorkOrderName) : null;

                Console.WriteLine($"File exists in source: {File.Exists(sourceFile)}");
                Console.WriteLine($"Service Account folder exists: {Directory.Exists(saPath)}");
                Console.WriteLine($"Work Order folder exists: {woPath != null && Directory.Exists(woPath)}");
            }
        });
    }

    private async Task OrganizeFilesAsync(string sourceFolder)
    {
        await Task.Run(() =>
        {
            try
            {
                Console.WriteLine($"\nStarting file organization in folder: {sourceFolder}");
                DebugInspectionFilesAsync(sourceFolder).Wait(); // Note: Using Wait() here as we're already in a Task.Run

                Console.WriteLine("Current work orders in memory:");
                foreach (var wo in _workOrders)
                {
                    Console.WriteLine($"SA: {wo.ProcessedServiceAccountName} | WO: {wo.WorkOrderName} | File: {wo.ProcessedNoteText}");
                }

                // First, create service account folders
                var serviceAccounts = _workOrders
                    .Where(wo => !string.IsNullOrEmpty(wo.ProcessedServiceAccountName))
                    .Select(wo => wo.ProcessedServiceAccountName)
                    .Distinct()
                    .ToList();

                foreach (var sa in serviceAccounts)
                {
                    var saPath = Path.Combine(sourceFolder, sa);
                    if (!Directory.Exists(saPath))
                    {
                        Console.WriteLine($"Creating service account folder: {sa}");
                        Directory.CreateDirectory(saPath);
                    }

                    // Get work orders for this service account that have files
                    var relatedWorkOrders = _workOrders
                        .Where(wo => wo.ProcessedServiceAccountName == sa)
                        .Where(wo => !string.IsNullOrEmpty(wo.WorkOrderName))
                        .Where(wo => !string.IsNullOrEmpty(wo.ProcessedNoteText))
                        .Where(wo => File.Exists(Path.Combine(sourceFolder, wo.ProcessedNoteText)));

                    foreach (var wo in relatedWorkOrders)
                    {
                        var woPath = Path.Combine(saPath, wo.WorkOrderName);
                        if (!Directory.Exists(woPath))
                        {
                            Console.WriteLine($"Creating work order folder: {wo.WorkOrderName} in {sa}");
                            Directory.CreateDirectory(woPath);
                        }

                        var sourceFile = Path.Combine(sourceFolder, wo.ProcessedNoteText);
                        var destFile = Path.Combine(woPath, wo.ProcessedNoteText);

                        try
                        {
                            Console.WriteLine($"Moving file {wo.ProcessedNoteText} to {woPath}");
                            if (!File.Exists(destFile))
                            {
                                File.Move(sourceFile, destFile);
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error moving file: {ex.Message}");
                        }
                    }
                }

                Console.WriteLine("\nFile organization completed!");
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"Error organizing files: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                Console.ResetColor();
            }
        });
    }
}